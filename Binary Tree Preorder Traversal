#include <iostream>
#include <vector>
#include <stack>
using namespace std;

// Определение структуры узла бинарного дерева
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Функция для прямого обхода бинарного дерева (preorder traversal)
vector<int> preorderTraversal(TreeNode* root) {
    vector<int> result;
    stack<TreeNode*> stack;

    // Если корень дерева не nullptr, помещаем его в стек
    if (root != nullptr)
        stack.push(root);

    while (!stack.empty()) {
        TreeNode* node = stack.top();
        stack.pop();
        result.push_back(node->val);

        // Помещаем правый потомок, если он есть, в стек первым (LIFO)
        if (node->right != nullptr)
            stack.push(node->right);

        // Помещаем левый потомок, если он есть, в стек вторым (LIFO)
        if (node->left != nullptr)
            stack.push(node->left);
    }

    return result;
}

// Функция для построения бинарного дерева из ввода пользователя
TreeNode* buildTree() {
    int val;
    cin >> val;
    if (val == -1) // Признак конца поддерева
        return nullptr;
    
    TreeNode* root = new TreeNode(val);
    cout << "Enter left child of " << val << ": ";
    root->left = buildTree();
    cout << "Enter right child of " << val << ": ";
    root->right = buildTree();
    return root;
}

int main() {
    cout << "Enter the values for the binary tree (enter -1 for no child):\n";
    TreeNode* root = buildTree();

    vector<int> result = preorderTraversal(root);

    cout << "Preorder traversal result: ";
    for (int val : result) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
