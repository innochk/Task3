#include <iostream>
#include <vector>
#include <string>

using namespace std;

bool isValid(const string& s) {
    int balance = 0;
    for (char ch : s) {
        if (ch == '(') {
            balance++;
        } else if (ch == ')') {
            balance--;
            if (balance < 0) {
                return false;
            }
        }
    }
    return balance == 0;
}

void removeInvalidParentheses(string s, int index, int leftRem, int rightRem, string& current, vector<string>& result) {
    if (leftRem == 0 && rightRem == 0) {
        if (isValid(current)) {
            result.push_back(current);
        }
        return;
    }
    
    for (int i = index; i < s.length(); ++i) {
        if (i != index && s[i] == s[i - 1]) {
            continue;
        }
        
        if (s[i] == '(' && leftRem > 0) {
            current.push_back(s[i]);
            removeInvalidParentheses(s, i + 1, leftRem - 1, rightRem, current, result);
            current.pop_back();
        } else if (s[i] == ')' && rightRem > 0) {
            current.push_back(s[i]);
            removeInvalidParentheses(s, i + 1, leftRem, rightRem - 1, current, result);
            current.pop_back();
        }
        
        if (s[i] != '(' && s[i] != ')') {
            current.push_back(s[i]);
            removeInvalidParentheses(s, i + 1, leftRem, rightRem, current, result);
            current.pop_back();
        }
    }
}

vector<string> removeInvalidParentheses(string s) {
    vector<string> result;
    string current;
    int leftRem = 0, rightRem = 0;
    
    // Counting the number of extra parentheses to remove
    for (char ch : s) {
        if (ch == '(') {
            leftRem++;
        } else if (ch == ')') {
            if (leftRem > 0) {
                leftRem--;
            } else {
                rightRem++;
            }
        }
    }
    
    removeInvalidParentheses(s, 0, leftRem, rightRem, current, result);
    return result;
}

int main() {
    string s;
    cout << "Enter the string: ";
    getline(cin, s);
    
    vector<string> validStrings = removeInvalidParentheses(s);
    
    cout << "Valid strings with minimum removals:" << endl;
    for (const string& str : validStrings) {
        cout << str << endl;
    }
    
    return 0;
}
