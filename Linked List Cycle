#include <iostream>

using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

bool hasCycle(ListNode *head) {
    if (head == NULL || head->next == NULL) {
        return false;
    }

    ListNode *slow = head;
    ListNode *fast = head->next;

    while (slow != fast) {
        if (fast == NULL || fast->next == NULL) {
            return false;
        }
        slow = slow->next;
        fast = fast->next->next;
    }
    return true;
}

int main() {
    int n, pos;
    cout << "Enter the number of nodes: ";
    cin >> n;

    if (n == 0) {
        cout << "Output: false" << endl;
        return 0;
    }

    ListNode* head = NULL;
    ListNode* tail = NULL;
    ListNode* cycleNode = NULL;

    cout << "Enter the nodes: ";
    for (int i = 0; i < n; ++i) {
        int value;
        cin >> value;
        ListNode* newNode = new ListNode(value);

        if (head == NULL) {
            head = newNode;
        } else {
            tail->next = newNode;
        }

        tail = newNode;

        if (i == pos) {
            cycleNode = newNode;
        }
    }

    if (pos != -1) {
        tail->next = cycleNode;
    }

    bool result = hasCycle(head);
    cout << "Output: " << (result ? "true" : "false") << endl;

    return 0;
}
