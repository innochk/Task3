#include <iostream>
#include <vector>
#include <queue>
#include <sstream>

using namespace std;

// Definition for a Node of an n-ary tree.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};

// Function to perform level order traversal
vector<vector<int>> levelOrder(Node* root) {
    vector<vector<int>> result;
    if (!root) return result;

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        int level_size = q.size();
        vector<int> level_nodes;

        for (int i = 0; i < level_size; ++i) {
            Node* node = q.front();
            q.pop();
            level_nodes.push_back(node->val);

            for (Node* child : node->children) {
                if (child)
                    q.push(child);
            }
        }

        result.push_back(level_nodes);
    }

    return result;
}

// Function to deserialize an n-ary tree from input
Node* deserialize(const vector<string>& nodes) {
    if (nodes.empty()) return nullptr;
    
    Node* root = new Node(stoi(nodes[0]));
    queue<Node*> q;
    q.push(root);
    
    int i = 1;
    while (!q.empty() && i < nodes.size()) {
        Node* node = q.front();
        q.pop();
        
        while (i < nodes.size() && nodes[i] != "null") {
            Node* child = new Node(stoi(nodes[i]));
            node->children.push_back(child);
            q.push(child);
            ++i;
        }
        
        ++i; // Skip over "null"
    }
    
    return root;
}

int main() {
    // Input reading
    string input;
    getline(cin, input);
    
    // Parse input into vector of strings
    vector<string> nodes;
    stringstream ss(input);
    string token;
    while (getline(ss, token, ',')) {
        nodes.push_back(token);
    }
    
    // Deserialize the tree
    Node* root = deserialize(nodes);
    
    // Perform level order traversal
    vector<vector<int>> result = levelOrder(root);
    
    // Output the result
    cout << "[";
    for (int i = 0; i < result.size(); ++i) {
        if (i > 0) cout << ",";
        cout << "[";
        for (int j = 0; j < result[i].size(); ++j) {
            if (j > 0) cout << ",";
            cout << result[i][j];
        }
        cout << "]";
    }
    cout << "]" << endl;
    
    return 0;
}
