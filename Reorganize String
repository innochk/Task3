#include <iostream>
#include <string>
#include <vector>

using namespace std;

string rearrangeString(string s) {
    // Step 1: Count frequencies of each character
    vector<int> freq(26, 0);
    for (char c : s) {
        freq[c - 'a']++;
    }
    
    // Step 2: Create pairs of characters and their frequencies
    vector<pair<int, char>> charFreq;
    for (int i = 0; i < 26; ++i) {
        if (freq[i] > 0) {
            charFreq.push_back({freq[i], i + 'a'});
        }
    }
    
    // Step 3: Sort characters by frequency (descending order)
    sort(charFreq.begin(), charFreq.end(), greater<pair<int, char>>());
    
    // Step 4: Rearrange characters ensuring no two adjacent characters are the same
    string result;
    pair<int, char> last{-1, '#'};
    
    while (!charFreq.empty()) {
        pair<int, char> curr = charFreq.front();
        charFreq.erase(charFreq.begin());
        
        result += curr.second;
        curr.first--;
        
        // If last character exists, push it back to the heap
        if (last.first > 0) {
            charFreq.push_back(last);
        }
        
        // Update last character
        last = curr;
        
        // Re-sort the heap
        sort(charFreq.begin(), charFreq.end(), greater<pair<int, char>>>());
    }
    
    // Check if we could rearrange without two adjacent characters being the same
    if (result.length() == s.length()) {
        return result;
    } else {
        return "";
    }
}

int main() {
    string s;
    cout << "Enter a string: ";
    cin >> s;
    
    string rearranged = rearrangeString(s);
    
    if (rearranged.empty()) {
        cout << "No possible rearrangement.\n";
    } else {
        cout << "Rearranged string: " << rearranged << "\n";
    }
    
    return 0;
}
